// ================================
// üìå ISD Attendance System (Final)
// ================================

// 1Ô∏è‚É£ Web App Entry Point
function doGet() {
  return HtmlService.createHtmlOutputFromFile('Index')
    .setTitle('ISD Attendance System')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// 2Ô∏è‚É£ Record Attendance Function
function recordAttendance(data) {
  if (!data || !data.username) {
    return { status: "error", message: "No Employee ID provided." };
  }

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const attendanceSheet = ss.getSheetByName("Raw Data");
  const teamSheet = ss.getSheetByName("Team Members");

  if (!attendanceSheet || !teamSheet) {
    return { status: "error", message: "Required sheets not found." };
  }

  const teamLastRow = teamSheet.getLastRow();
  let teamValues = [];
  if (teamLastRow >= 2) {
    teamValues = teamSheet.getRange(2, 1, teamLastRow - 1, 8).getValues();
  }

  // üß≠ Create a user map for quick lookup
  const userMap = {};
  teamValues.forEach(row => {
    const username = (row[7] || "").toString().trim();
    if (username) {
      userMap[username.toLowerCase()] = {
        Name: row[0] || "",
        Organization: row[1] || "",
        District: row[2] || "",
        Section: row[3] || "",
        Designation: row[4] || "",
        Username: username
      };
    }
  });

  const usernameKey = data.username.trim().toLowerCase();
  if (!userMap[usernameKey]) {
    return { status: "error", message: "‚ùå You are not authorized to mark attendance." };
  }

  // üïì Date and Time Setup
  const tz = "GMT+5";
  const now = new Date();
  const todayDate = Utilities.formatDate(now, tz, "dd-MMMM-yyyy"); // ‚úÖ formatted
  const timeString = Utilities.formatDate(now, tz, "HH:mm:ss");

  const latitude = data.latitude || "";
  const longitude = data.longitude || "";

  // üåç Reverse Geocode ‚Üí Address
  let address = "";
  try {
    if (latitude && longitude) {
      const response = Maps.newGeocoder().reverseGeocode(latitude, longitude);
      if (response.status === "OK" && response.results && response.results.length > 0) {
        address = response.results[0].formatted_address || "";
      } else {
        address = "Address not found";
      }
    }
  } catch (e) {
    address = "Unable to fetch address";
  }

  // üîó Create Google Maps Link
  const mapLink = (latitude && longitude)
    ? `=HYPERLINK("https://www.google.com/maps?q=${latitude},${longitude}","View Location")`
    : "";

  const details = userMap[usernameKey];
  const attendanceData = attendanceSheet.getDataRange().getValues();

  // üö´ Prevent duplicate attendance for the same day
  const duplicateEntry = attendanceData.some(row =>
    row[0].toString().toLowerCase() === details.Username.toLowerCase() &&
    Utilities.formatDate(new Date(row[1]), tz, "dd-MMMM-yyyy") === todayDate
  );
  if (duplicateEntry) {
    return { status: "error", message: "‚ö†Ô∏è Attendance already marked for today!" };
  }

  // ‚úÖ If "Present"
  if (data.status === "Present") {
    attendanceSheet.appendRow([
      details.Username,
      todayDate,      // ‚úÖ formatted date
      timeString,
      latitude,
      longitude,
      address,
      "Present",
      mapLink
    ]);
  }

  // ‚úÖ If "Leave"
  else if (data.status === "Leave") {
    const from = new Date(data.fromDate);
    const to = new Date(data.toDate);
    if (to < from) {
      return { status: "error", message: "‚ö†Ô∏è Invalid date range!" };
    }

    const leaveDates = [];
    let current = new Date(from);
    while (current <= to) {
      leaveDates.push(Utilities.formatDate(new Date(current), tz, "dd-MMMM-yyyy"));
      current.setDate(current.getDate() + 1);
    }

    const duplicateLeave = attendanceData.some(row =>
      row[0].toString().toLowerCase() === details.Username.toLowerCase() &&
      leaveDates.includes(Utilities.formatDate(new Date(row[1]), tz, "dd-MMMM-yyyy"))
    );
    if (duplicateLeave) {
      return { status: "error", message: "‚ö†Ô∏è Attendance or leave already marked for this date range!" };
    }

    // Append each leave date
    current = new Date(from);
    while (current <= to) {
      attendanceSheet.appendRow([
        details.Username,
        Utilities.formatDate(new Date(current), tz, "dd-MMMM-yyyy"), // ‚úÖ formatted
        "",
        "",
        "",
        address || "N/A",
        "Leave",
        mapLink
      ]);
      current.setDate(current.getDate() + 1);
    }
  }

  return { status: "success", message: "‚úÖ Attendance recorded successfully!", details: details };
}
